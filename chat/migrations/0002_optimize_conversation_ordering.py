# Generated by Django for optimizing conversation ordering

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('chat', '0001_initial'),
    ]

    operations = [
        # Add indexes for faster conversation ordering
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS chat_conversation_updated_at_idx ON chat_conversation (updated_at DESC);",
            reverse_sql="DROP INDEX IF EXISTS chat_conversation_updated_at_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS chat_conversation_created_at_idx ON chat_conversation (created_at DESC);",
            reverse_sql="DROP INDEX IF EXISTS chat_conversation_created_at_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS chat_message_timestamp_idx ON chat_message (timestamp DESC);",
            reverse_sql="DROP INDEX IF EXISTS chat_message_timestamp_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS chat_message_conversation_timestamp_idx ON chat_message (conversation_id, timestamp DESC);",
            reverse_sql="DROP INDEX IF EXISTS chat_message_conversation_timestamp_idx;"
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS chat_groupmembership_active_idx ON chat_groupmembership (conversation_id, is_active, user_id);",
            reverse_sql="DROP INDEX IF EXISTS chat_groupmembership_active_idx;"
        ),
    ]
